package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"time"

	_ "github.com/lib/pq"
)

var db *sql.DB

func main() {
	var err error

	// Connect to PostgreSQL
	connStr := "user=postgres password=anshuman.01 dbname=file_manager sslmode=disable"
	db, err = sql.Open("postgres", connStr)
	if err != nil {
		log.Fatal("DB connection error:", err)
	}
	defer db.Close()

	fmt.Println("Server running on :8080")

	http.HandleFunc("/upload", corsMiddleware(fileUploadHandler))
	http.HandleFunc("/download", corsMiddleware(fileDownloadHandler))

	log.Fatal(http.ListenAndServe(":8080", nil))
}

func corsMiddleware(next http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "http://localhost:5173")
		w.Header().Set("Access-Control-Allow-Methods", "POST, GET, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")

		if r.Method == http.MethodOptions {
			return
		}
		next(w, r)
	}
}

func fileUploadHandler(w http.ResponseWriter, r *http.Request) {
	r.ParseMultipartForm(20 << 20)

	file, info, err := r.FormFile("myFile")
	if err != nil {
		http.Error(w, "Error retrieving the file", http.StatusBadRequest)
		return
	}
	defer file.Close()

	dst, err := createLocation(info.Filename)
	if err != nil {
		http.Error(w, "Error saving the file", http.StatusInternalServerError)
		return
	}
	defer dst.Close()

	_, err = dst.ReadFrom(file)
	if err != nil {
		http.Error(w, "Error writing the file", http.StatusInternalServerError)
		return
	}

	// Insert metadata into DB
	location := filepath.Join("uploads", info.Filename)
	_, err = db.Exec(`
		INSERT INTO files (name, size, type, location, uploaded_at)
		VALUES ($1, $2, $3, $4, $5)
	`, info.Filename, info.Size, info.Header.Get("Content-Type"), location, time.Now())
	if err != nil {
		http.Error(w, "Error saving metadata to database", http.StatusInternalServerError)
		return
	}

	fmt.Fprintf(w, "File %s uploaded and metadata stored.\n", info.Filename)
}

func createLocation(fileName string) (*os.File, error) {
	if _, err := os.Stat("uploads"); os.IsNotExist(err) {
		os.Mkdir("uploads", 0755)
	}
	return os.Create(filepath.Join("uploads", fileName))
}

func fileDownloadHandler(w http.ResponseWriter, r *http.Request) {
	fileName := r.URL.Query().Get("file")
	if fileName == "" {
		http.Error(w, "Missing file parameter", http.StatusBadRequest)
		return
	}

	path := filepath.Join("uploads", fileName)
	if _, err := os.Stat(path); os.IsNotExist(err) {
		http.Error(w, "File not found", http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Disposition", "attachment; filename="+fileName)
	w.Header().Set("Content-Type", "application/octet-stream")
	http.ServeFile(w, r, path)
}
